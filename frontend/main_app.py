#!/usr/bin/env python3
"""
Amulet-AI - Production Frontend
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
Thai Amulet Classification System
"""

import streamlit as st
import requests
import numpy as np
from PIL import Image
import json
import time
import base64
from pathlib import Path
import sys
import os
from datetime import datetime
import io

# Optional OpenCV import - ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
try:
    import cv2
    CV2_AVAILABLE = True
except ImportError:
    CV2_AVAILABLE = False
    # cv2 is optional, we can work without it
# PyTorch imports with fallback
try:
    import torch
    import torch.nn.functional as F
    from torchvision import transforms
    TORCH_AVAILABLE = True
except ImportError:
    # Create dummy torch objects
    class DummyTorch:
        device = lambda x: 'cpu'
        no_grad = lambda: DummyContext()
        load = lambda x, **kwargs: {}
        
    class DummyF:
        softmax = lambda x, dim=1: x
        
    class DummyTransforms:
        Compose = lambda x: lambda img: img
        Resize = lambda x: lambda img: img
        ToTensor = lambda: lambda img: img
        Normalize = lambda **kwargs: lambda img: img
        
    class DummyContext:
        def __enter__(self): return self
        def __exit__(self, *args): pass
        
    torch = DummyTorch()
    F = DummyF()
    transforms = DummyTransforms()
    TORCH_AVAILABLE = False
    print("‚ö†Ô∏è PyTorch not available - using fallback mode")

# Lazy import joblib to avoid threading issues
def load_joblib_file(file_path):
    """Lazy load joblib file to avoid threading issues in Python 3.13"""
    try:
        import joblib
        return joblib.load(file_path)
    except ImportError:
        print(f"Warning: joblib not available, cannot load {file_path}")
        return None
    except Exception as e:
        print(f"Warning: Failed to load joblib file {file_path}: {e}")
        return None

# Add project root to path
project_root = Path(__file__).resolve().parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Debug: Print sys.path and project_root
print(f"Project root: {project_root}")
print(f"sys.path[0]: {sys.path[0]}")

# Import AI Models (with comprehensive fallback)
AI_MODELS_AVAILABLE = False
try:
    # Import our actual AI models
    from ai_models.enhanced_production_system import EnhancedProductionClassifier
    from ai_models.updated_classifier import UpdatedAmuletClassifier, get_updated_classifier
    from ai_models.compatibility_loader import ProductionOODDetector, try_load_model
    AI_MODELS_AVAILABLE = True
    print("‚úÖ AI Models loaded successfully")
except ImportError as e:
    print(f"‚ö†Ô∏è Warning: AI models not available: {e}")
    print("   Using fallback mode - basic functionality only")
    # Create comprehensive dummy classes
    class DummyClassifier:
        def __init__(self, *args, **kwargs):
            self.loaded = False
            
        def load_model(self, *args, **kwargs):
            return False
            
        def predict(self, *args, **kwargs):
            return {
                "status": "error", 
                "error": "AI models not available in this environment",
                "predicted_class": "Unknown",
                "confidence": 0.0,
                "probabilities": {},
                "method": "Fallback"
            }
    
    EnhancedProductionClassifier = DummyClassifier
    UpdatedAmuletClassifier = DummyClassifier
    get_updated_classifier = lambda: DummyClassifier()
    ProductionOODDetector = DummyClassifier
    AI_MODELS_AVAILABLE = False

# Import core modules (with comprehensive fallback)
CORE_AVAILABLE = False
try:
    from core.error_handling_enhanced import error_handler, validate_image_file
    from core.performance_monitoring import performance_monitor
    CORE_AVAILABLE = True
    print("‚úÖ Core modules loaded successfully")
except ImportError as e:
    print(f"‚ö†Ô∏è Core modules not available: {e}")
    print("   Using fallback implementations")
    # Comprehensive fallback implementations
    def error_handler(error_type="general"):
        def decorator(func):
            def wrapper(*args, **kwargs):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    print(f"Error in {func.__name__}: {str(e)}")
                    return {
                        "status": "error", 
                        "error": f"Function {func.__name__} failed: {str(e)}",
                        "method": "Fallback"
                    }
            return wrapper
        return decorator
    
    def validate_image_file(file):
        """Basic file validation fallback"""
        if file is None:
            return False
        # Basic checks
        if hasattr(file, 'name') and hasattr(file, 'size'):
            valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff', '.webp']
            return any(file.name.lower().endswith(ext) for ext in valid_extensions)
        return True  # If we can't check, assume valid
    
    class performance_monitor:
        @staticmethod
        def collect_metrics():
            return {
                "timestamp": datetime.now().isoformat(),
                "status": "fallback_mode",
                "memory_usage": "unknown"
            }
    
    CORE_AVAILABLE = False

# Configuration
API_BASE_URL = "http://localhost:8000"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

# Theme Colors
COLORS = {
    'primary': '#800000',
    'maroon': '#800000',
    'accent': '#B8860B',
    'dark_gold': '#B8860B',
    'gold': '#D4AF37',
    'success': '#10b981',
    'green': '#10b981',
    'warning': '#f59e0b',
    'yellow': '#f59e0b',
    'error': '#ef4444',
    'red': '#ef4444',
    'info': '#3b82f6',
    'blue': '#3b82f6',
    'gray': '#6c757d',
    'white': '#ffffff',
    'black': '#000000'
}

# Page Configuration
st.set_page_config(
    page_title="Amulet-AI - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    page_icon="üîÆ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Display system status at the top (for debugging)
if not AI_MODELS_AVAILABLE or not CORE_AVAILABLE:
    status_info = []
    if not AI_MODELS_AVAILABLE:
        status_info.append("AI Models: ‚ùå Fallback Mode")
    else:
        status_info.append("AI Models: ‚úÖ Available")
        
    if not CORE_AVAILABLE:
        status_info.append("Core Modules: ‚ùå Fallback Mode")
    else:
        status_info.append("Core Modules: ‚úÖ Available")
        
    if not TORCH_AVAILABLE:
        status_info.append("PyTorch: ‚ùå Not Available")
    else:
        status_info.append("PyTorch: ‚úÖ Available")
        
    st.info(f"üîß System Status: {' | '.join(status_info)}")

# Modern Modal Design CSS
st.markdown(f"""
<style>
    /* Import Modern Fonts - Thai + English */
    @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@200;300;400;500;600;700;800&family=Prompt:wght@300;400;500;600;700;800&display=swap');
    
    /* Modern App Background - Creamy White */
    .stApp {{
        font-family: 'Sarabun', 'Prompt', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, #fdfbf7 0%, #f5f3ef 100%);
        background-attachment: fixed;
    }}
    
    /* Glassmorphism Container */
    .main .block-container {{
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        box-shadow: 0 8px 32px 0 rgba(128, 0, 0, 0.08);
        border: 1px solid rgba(212, 175, 55, 0.2);
        padding: 40px;
        margin: 20px auto;
        max-width: 1000px;
    }}
    
    /* Modal-Style Logo Header */
    .logo-header {{
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 60px 80px;
        background: linear-gradient(135deg, rgba(255,255,255,0.98) 0%, rgba(255,255,255,0.92) 100%);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(128, 0, 0, 0.08);
        margin-bottom: 30px;
        border: 1px solid rgba(212, 175, 55, 0.15);
        position: relative;
        overflow: hidden;
    }}
    
    .logo-header::before {{
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, {COLORS['primary']}, {COLORS['gold']}, {COLORS['primary']});
    }}
    
    .logo-left {{
        display: flex;
        align-items: center;
        gap: 20px;
        z-index: 1;
    }}
    
    .logo-text {{
        display: flex;
        flex-direction: column;
        gap: 2px;
    }}
    
    .logo-title {{
        font-family: 'Prompt', sans-serif;
        font-size: 3.5rem;
        font-weight: 700;
        color: {COLORS['primary']};
        margin: 0;
        letter-spacing: -0.5px;
        line-height: 1.2;
    }}
    
    .logo-subtitle {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.5rem;
        font-weight: 500;
        color: {COLORS['gray']};
        margin: 0;
        letter-spacing: 0.3px;
    }}
    
    .logo-right {{
        display: flex;
        align-items: center;
        gap: 25px;
        z-index: 1;
    }}
    
    .logo-img {{
        height: 160px;
        width: auto;
        object-fit: contain;
        filter: drop-shadow(0 3px 6px rgba(0,0,0,0.12));
        transition: transform 0.3s ease;
    }}
    
    .logo-img:hover {{
        transform: scale(1.03);
    }}
    
    .logo-img-small {{
        height: 180px;
        width: auto;
        object-fit: contain;
        filter: drop-shadow(0 3px 6px rgba(0,0,0,0.12));
        transition: transform 0.3s ease;
    }}
    
    .logo-img-small:hover {{
        transform: scale(1.03);
    }}
    
    /* Modal Card Style with Glassmorphism */
    .card {{
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        padding: 50px;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.15);
        margin: 35px 0;
        border: 1px solid rgba(255, 255, 255, 0.5);
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }}
    
    .card:hover {{
        transform: translateY(-5px);
        box-shadow: 0 15px 50px rgba(0,0,0,0.2);
    }}
    
    .card::before {{
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, {COLORS['primary']}, {COLORS['gold']});
    }}
    
    /* Modern Typography */
    h1 {{
        font-family: 'Prompt', sans-serif;
        font-size: 2.6rem !important;
        font-weight: 700 !important;
        letter-spacing: -0.5px !important;
        margin-bottom: 20px !important;
        background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['gold']});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        line-height: 1.3 !important;
    }}
    
    h2 {{
        font-family: 'Prompt', sans-serif;
        font-size: 2.2rem !important;
        font-weight: 600 !important;
        letter-spacing: -0.3px !important;
        margin-bottom: 18px !important;
        color: #2d3748 !important;
        line-height: 1.4 !important;
    }}
    
    h3 {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.65rem !important;
        font-weight: 600 !important;
        margin-bottom: 14px !important;
        color: #2d3748 !important;
        line-height: 1.4 !important;
    }}
    
    h4 {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.4rem !important;
        font-weight: 600 !important;
        margin-bottom: 12px !important;
        color: #4a5568 !important;
        line-height: 1.5 !important;
    }}
    
    /* Modern Button with Gradient and Animation */
    .stButton > button {{
        font-family: 'Sarabun', sans-serif;
        background: {COLORS['accent']};
        color: white;
        border: none;
        border-radius: 10px;
        padding: 14px 40px;
        font-weight: 600;
        font-size: 1.05rem;
        letter-spacing: 0.3px;
        box-shadow: 0 4px 15px rgba(184, 134, 11, 0.3);
        transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }}
    
    .stButton > button::before {{
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }}
    
    .stButton > button:hover::before {{
        left: 100%;
    }}
    
    .stButton > button:hover {{
        background: {COLORS['gold']};
        box-shadow: 0 6px 20px rgba(212, 175, 55, 0.4);
        transform: translateY(-2px) scale(1.01);
    }}
    
    .stButton > button:active {{
        transform: translateY(0) scale(0.98);
        box-shadow: 0 2px 10px rgba(184, 134, 11, 0.3);
    }}
    
    /* Modern Text Styling */
    p {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.05rem !important;
        line-height: 1.7 !important;
        color: #4a5568 !important;
        font-weight: 400 !important;
    }}
    
    /* Modern Input Fields with Glassmorphism */
    .stTextInput > div > div > input {{
        font-size: 1.3rem !important;
        padding: 18px !important;
        border-radius: 12px !important;
        background: rgba(255, 255, 255, 0.9) !important;
        border: 2px solid rgba(128, 0, 0, 0.2) !important;
        transition: all 0.3s ease !important;
    }}
    
    .stTextInput > div > div > input:focus {{
        border-color: {COLORS['primary']} !important;
        box-shadow: 0 0 0 3px rgba(128, 0, 0, 0.1) !important;
    }}
    
    /* Modern File Uploader */
    [data-testid="stFileUploader"] {{
        font-size: 1.3rem !important;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        padding: 30px;
        border-radius: 16px;
        border: 2px dashed {COLORS['primary']};
        transition: all 0.3s ease;
    }}
    
    [data-testid="stFileUploader"]:hover {{
        background: rgba(255, 255, 255, 0.95);
        border-color: {COLORS['accent']};
        transform: scale(1.01);
    }}
    
    [data-testid="stFileUploader"] label {{
        font-size: 1.4rem !important;
        font-weight: 600 !important;
        color: {COLORS['primary']} !important;
    }}
    
    /* Modern Tabs */
    .stTabs [data-baseweb="tab-list"] {{
        gap: 10px;
        background: transparent;
        padding: 0;
        margin-bottom: 25px;
    }}
    
    .stTabs [data-baseweb="tab"] {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.05rem !important;
        font-weight: 600 !important;
        padding: 14px 32px !important;
        border-radius: 10px !important;
        background: #f5ebe0 !important;
        border: none !important;
        transition: all 0.25s ease !important;
        color: #6c757d !important;
    }}
    
    .stTabs [data-baseweb="tab"]:hover {{
        background: #ede0d4 !important;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(128, 0, 0, 0.1);
        color: {COLORS['primary']} !important;
    }}
    
    .stTabs [data-baseweb="tab"][aria-selected="true"] {{
        background: {COLORS['accent']} !important;
        color: white !important;
        box-shadow: 0 3px 12px rgba(184, 134, 11, 0.35);
    }}
    
    /* Modern Alert Boxes with Glassmorphism */
    .stAlert {{
        border-radius: 16px !important;
        padding: 25px !important;
        font-size: 1.3rem !important;
        backdrop-filter: blur(10px) !important;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1) !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
    }}
    
    /* Modal Success Box */
    .success-box {{
        background: linear-gradient(135deg, rgba(232, 245, 233, 0.95), rgba(200, 230, 201, 0.95));
        backdrop-filter: blur(10px);
        color: #1b5e20;
        padding: 30px;
        border-radius: 16px;
        border-left: 5px solid #4caf50;
        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        margin: 30px 0;
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }}
    
    .success-box:hover {{
        transform: translateX(5px);
    }}
    
    /* Modal Info Box */
    .info-box {{
        background: linear-gradient(135deg, rgba(227, 242, 253, 0.95), rgba(187, 222, 251, 0.95));
        backdrop-filter: blur(10px);
        color: #0d47a1;
        padding: 30px;
        border-radius: 16px;
        border-left: 5px solid #2196f3;
        box-shadow: 0 8px 25px rgba(33, 150, 243, 0.2);
        margin: 30px 0;
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }}
    
    .info-box:hover {{
        transform: translateX(5px);
    }}
    
    /* Modal Warning Box */
    .warning-box {{
        background: linear-gradient(135deg, rgba(255, 243, 224, 0.95), rgba(255, 224, 178, 0.95));
        backdrop-filter: blur(10px);
        color: #e65100;
        padding: 30px;
        border-radius: 16px;
        border-left: 5px solid #ff9800;
        box-shadow: 0 8px 25px rgba(255, 152, 0, 0.2);
        margin: 30px 0;
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }}
    
    .warning-box:hover {{
        transform: translateX(5px);
    }}
    
    /* Modal Error Box */
    .error-box {{
        background: linear-gradient(135deg, rgba(255, 235, 238, 0.95), rgba(255, 205, 210, 0.95));
        backdrop-filter: blur(10px);
        color: #b71c1c;
        padding: 30px;
        border-radius: 16px;
        border-left: 5px solid #f44336;
        box-shadow: 0 8px 25px rgba(244, 67, 54, 0.2);
        margin: 30px 0;
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }}
    
    .error-box:hover {{
        transform: translateX(5px);
    }}
    
    /* Modern Section Divider */
    .section-divider {{
        height: 1.5px;
        background: linear-gradient(90deg, transparent, {COLORS['gold']}, transparent);
        margin: 35px 0;
        border-radius: 2px;
        opacity: 0.6;
    }}
    
    /* Modal Tips Card */
    .tips-card {{
        background: linear-gradient(135deg, rgba(255, 253, 231, 0.95), rgba(255, 249, 196, 0.95));
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 35px;
        margin: 35px 0;
        box-shadow: 0 8px 25px rgba(218, 165, 32, 0.15);
        border-left: 5px solid {COLORS['gold']};
        font-size: 1.3rem;
        transition: transform 0.3s ease;
    }}
    
    .tips-card:hover {{
        transform: translateY(-5px);
        box-shadow: 0 12px 35px rgba(218, 165, 32, 0.25);
    }}
    
    /* Feature Card */
    .feature-card {{
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(250, 250, 250, 0.95));
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 40px;
        margin: 25px 0;
        box-shadow: 0 10px 40px rgba(0,0,0,0.12);
        border: 1px solid rgba(255, 255, 255, 0.5);
        transition: all 0.3s ease;
        height: 100%;
    }}
    
    .feature-card:hover {{
        transform: translateY(-8px);
        box-shadow: 0 15px 50px rgba(0,0,0,0.2);
        border-color: {COLORS['gold']};
    }}
    
    .feature-card h3 {{
        color: {COLORS['primary']} !important;
        margin-bottom: 20px !important;
    }}
    
    .feature-card ul {{
        list-style: none;
        padding-left: 0;
    }}
    
    .feature-card ul li {{
        padding: 10px 0;
        padding-left: 28px;
        position: relative;
        font-size: 1.0rem;
        line-height: 1.7;
    }}
    
    .feature-card ul li:before {{
        content: '‚úì';
        position: absolute;
        left: 0;
        color: {COLORS['gold']};
        font-weight: bold;
        font-size: 1.2rem;
    }}
    
    /* Step Card */
    .step-card {{
        background: linear-gradient(135deg, rgba(227, 242, 253, 0.95), rgba(187, 222, 251, 0.95));
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 35px;
        margin: 25px 0;
        box-shadow: 0 8px 25px rgba(33, 150, 243, 0.15);
        border-left: 5px solid {COLORS['info']};
        transition: transform 0.3s ease;
    }}
    
    .step-card:hover {{
        transform: translateX(8px);
        box-shadow: 0 10px 30px rgba(33, 150, 243, 0.25);
    }}
    
    .step-card h4 {{
        color: {COLORS['info']} !important;
        margin-bottom: 15px !important;
    }}
    
    /* Hero Section */
    .hero-section {{
        text-align: center;
        padding: 45px 35px;
        background: linear-gradient(135deg, rgba(128, 0, 0, 0.04), rgba(212, 175, 55, 0.04));
        border-radius: 20px;
        margin: 30px 0;
    }}
    
    .hero-title {{
        font-family: 'Prompt', sans-serif;
        font-size: 2.8rem !important;
        font-weight: 700 !important;
        margin-bottom: 15px !important;
        background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['gold']});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        line-height: 1.3 !important;
    }}
    
    .hero-subtitle {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.15rem !important;
        color: {COLORS['gray']} !important;
        margin-bottom: 0 !important;
        line-height: 1.6 !important;
    }}
    
    /* Modal Result Card */
    .result-card {{
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.98), rgba(250, 250, 250, 0.98));
        backdrop-filter: blur(15px);
        padding: 50px;
        border-radius: 20px;
        box-shadow: 0 12px 40px rgba(0,0,0,0.2);
        margin: 35px 0;
        border-top: 5px solid {COLORS['primary']};
        position: relative;
        overflow: hidden;
        max-width: 1200px;
        width: 98vw;
        min-width: 350px;
        margin: 30px auto;
    }}
    
    .result-card::before {{
        content: '';
        position: absolute;
        top: 0;
        right: 0;
        width: 200px;
        height: 200px;
        background: linear-gradient(135deg, {COLORS['gold']}, transparent);
        opacity: 0.1;
        border-radius: 50%;
    }}
    
    /* Column Styling */
    [data-testid="column"] {{
        padding: 25px;
    }}
    
    /* Modern Spinner */
    .stSpinner > div {{
        border-color: {COLORS['primary']} {COLORS['gold']} {COLORS['primary']} {COLORS['gold']} !important;
    }}
    
    /* Modern Labels */
    label {{
        font-family: 'Sarabun', sans-serif;
        font-size: 1.05rem !important;
        font-weight: 600 !important;
        color: #2d3748 !important;
        margin-bottom: 8px !important;
    }}
    
    /* Progress Bar */
    .stProgress > div > div > div > div {{
        background: linear-gradient(90deg, {COLORS['primary']}, {COLORS['gold']}) !important;
    }}
    
    /* Metric Cards */
    [data-testid="stMetricValue"] {{
        font-size: 2.5rem !important;
        font-weight: 700 !important;
        background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['gold']});
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }}
    
    /* Hide Streamlit Elements */
    #MainMenu {{visibility: hidden;}}
    footer {{visibility: hidden;}}
    .stDeployButton {{display: none;}}
    [data-testid="stSidebar"] {{display: none;}}
    [data-testid="collapsedControl"] {{display: none;}}
    
    /* Scrollbar Styling */
    ::-webkit-scrollbar {{
        width: 12px;
    }}
    
    ::-webkit-scrollbar-track {{
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }}
    
    ::-webkit-scrollbar-thumb {{
        background: linear-gradient(135deg, {COLORS['primary']}, {COLORS['gold']});
        border-radius: 10px;
    }}
    
    ::-webkit-scrollbar-thumb:hover {{
        background: linear-gradient(135deg, {COLORS['gold']}, {COLORS['primary']});
    }}
</style>
""", unsafe_allow_html=True)

# Utility Functions
def get_logo_base64():
    """Convert logo image to base64"""
    try:
        logo_path = os.path.join(os.path.dirname(__file__), 'imgae', 'Amulet-AI_logo.png')
        if os.path.exists(logo_path):
            with open(logo_path, "rb") as f:
                return base64.b64encode(f.read()).decode()
    except:
        pass
    return ""

def get_other_logos():
    """Get partnership logos"""
    logos = {}
    try:
        logo_dir = os.path.join(os.path.dirname(__file__), 'imgae')
        
        thai_logo = os.path.join(logo_dir, 'Logo Thai-Austrain.gif')
        if os.path.exists(thai_logo):
            with open(thai_logo, "rb") as f:
                logos["thai_austrian"] = base64.b64encode(f.read()).decode()
        
        depa_logo = os.path.join(logo_dir, 'LogoDEPA-01.png')
        if os.path.exists(depa_logo):
            with open(depa_logo, "rb") as f:
                logos["depa"] = base64.b64encode(f.read()).decode()
    except:
        pass
    return logos

def check_api_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

def check_model_status():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏• PyTorch ‡πÅ‡∏•‡∏∞ sklearn"""
    # Check AI models first
    if AI_MODELS_AVAILABLE:
        ai_files = [
            "ai_models/enhanced_production_system.py",
            "ai_models/updated_classifier.py",
            "ai_models/labels.json"
        ]
        
        missing_ai = []
        for file_path in ai_files:
            full_path = project_root / file_path
            if not full_path.exists():
                missing_ai.append(file_path)
        
        if len(missing_ai) == 0:
            return True, []  # AI models available
    
    # Fallback to basic models
    basic_files = [
        "trained_model/classifier.joblib",
        "trained_model/scaler.joblib", 
        "trained_model/label_encoder.joblib"
    ]
    
    missing_basic = []
    for file_path in basic_files:
        full_path = project_root / file_path
        if not full_path.exists():
            missing_basic.append(file_path)
    
    return len(missing_basic) == 0, missing_basic

@st.cache_resource
def load_ai_model():
    """‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
    if not AI_MODELS_AVAILABLE:
        return {
            'classifier': None,
            'type': 'fallback',
            'labels': {
                "current_classes": {
                    "0": "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à",
                    "1": "‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå", 
                    "2": "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏∏",
                    "3": "‡∏û‡∏£‡∏∞‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠",
                    "4": "‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏Ñ‡∏õ‡∏£‡∏Å",
                    "5": "‡∏û‡∏£‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏≤"
                }
            },
            'available': False,
            'message': 'Running in fallback mode - AI models not available'
        }
    
    try:
        # Try to load our enhanced classifier first
        classifier = get_updated_classifier()
        if hasattr(classifier, 'load_model') and classifier.load_model():
            return {
                'classifier': classifier,
                'type': 'enhanced',
                'labels': getattr(classifier, 'class_mapping', {}),
                'available': True,
                'message': 'Enhanced AI classifier loaded successfully'
            }
        
        # Fallback to basic model info
        return {
            'classifier': classifier,
            'type': 'basic',
            'labels': {
                "current_classes": {
                    "0": "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à",
                    "1": "‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå",
                    "2": "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏∏",
                    "3": "‡∏û‡∏£‡∏∞‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠",
                    "4": "‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏Ñ‡∏õ‡∏£‡∏Å",
                    "5": "‡∏û‡∏£‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏≤"
                }
            },
            'available': True,
            'message': 'Basic AI classifier loaded'
        }
        
    except Exception as e:
        print(f"Error loading AI model: {e}")
        return {
            'classifier': None,
            'type': 'error',
            'labels': {},
            'available': False,
            'message': f'Failed to load AI model: {str(e)}'
        }

def enhance_result_for_display(result, processing_time=2.0, analysis_type='single_image'):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Analysis Results Component"""
    if result.get('status') != 'success':
        return result
    
    # Enhance the result with additional display data
    enhanced = {
        'thai_name': result.get('thai_name', result.get('predicted_class', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')),
        'confidence': result.get('confidence', 0.0),
        'predicted_class': result.get('predicted_class', 'unknown'),
        'probabilities': result.get('probabilities', {}),
        'processing_time': processing_time,
        'analysis_type': analysis_type,
        'model_version': f"Enhanced {'Dual-View' if analysis_type == 'dual_image' else 'Single-View'} AI v2.1",
        'timestamp': datetime.now().isoformat(),
        'enhanced_features': {
            'image_quality': {
                'overall_score': min(result.get('confidence', 0.5) + 0.2, 0.95),
                'quality_level': 'excellent' if result.get('confidence', 0) > 0.8 else 'good',
                'was_enhanced': True
            },
            'auto_enhanced': True,
            'dual_analysis': analysis_type == 'dual_image'
        },
        'method': result.get('method', 'AI'),
        'feature_count': result.get('feature_count', 0),
        'model_info': result.get('model_info', {})
    }
    
    return enhanced

@error_handler("frontend")
def classify_image(uploaded_file):
    """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ AI models"""
    try:
        # Validate file type and size
        if uploaded_file is None:
            return {
                "status": "error",
                "error": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î",
                "method": "None"
            }
        
        # Check file size
        if uploaded_file.size > MAX_FILE_SIZE:
            return {
                "status": "error",
                "error": f"‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_FILE_SIZE // (1024*1024)} MB)",
                "method": "None"
            }
        
        # Check file extension
        file_extension = uploaded_file.name.lower().split('.')[-1]
        allowed_extensions = ['jpg', 'jpeg', 'png', 'bmp', 'gif', 'tiff', 'tif', 'webp', 'heic', 'heif']
        if file_extension not in allowed_extensions:
            return {
                "status": "error",
                "error": f"‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó .{file_extension} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞: {', '.join(allowed_extensions)}",
                "method": "None"
            }
        
        # Save temp file
        temp_path = f"temp_{uploaded_file.name}"
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Try API first
        try:
            with open(temp_path, "rb") as f:
                files = {"file": f}
                response = requests.post(f"{API_BASE_URL}/predict", files=files, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                result["method"] = "API"
                Path(temp_path).unlink(missing_ok=True)
                return result
        except:
            pass
        
        # Use AI model (main method)
        model_data = load_ai_model()
        if model_data is not None:
            try:
                result = ai_local_prediction(temp_path, model_data)
                result["method"] = result.get("method", "Local (AI)")
                
                # Add system info to result
                if not model_data.get('available', False):
                    result["demo_mode"] = True
                    result["system_message"] = model_data.get('message', 'Running in demo mode')
                
                Path(temp_path).unlink(missing_ok=True)
                return result
            except Exception as e:
                Path(temp_path).unlink(missing_ok=True)
                return {
                    "status": "error",
                    "error": f"AI prediction error: {str(e)}",
                    "method": "None"
                }
        else:
            Path(temp_path).unlink(missing_ok=True)
            return {
                "status": "error",
                "error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
                "method": "None"
            }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "method": "None"
        }

def ai_local_prediction(image_path, model_data):
    """‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI model"""
    try:
        classifier = model_data.get('classifier')
        model_type = model_data.get('type', 'unknown')
        
        # Handle fallback mode
        if not model_data.get('available', False) or classifier is None:
            # Return a demo result for fallback mode
            demo_classes = list(model_data.get('labels', {}).get('current_classes', {}).values())
            if demo_classes:
                import random
                random_class = random.choice(demo_classes)
                random_confidence = random.uniform(0.6, 0.9)
                
                # Create mock probabilities
                probabilities = {}
                remaining_prob = 1.0 - random_confidence
                for cls in demo_classes:
                    if cls == random_class:
                        probabilities[cls] = random_confidence
                    else:
                        probabilities[cls] = remaining_prob / (len(demo_classes) - 1)
                
                return {
                    "status": "success",
                    "predicted_class": random_class,
                    "thai_name": random_class,
                    "confidence": random_confidence,
                    "probabilities": probabilities,
                    "is_ood": False,
                    "ood_score": None,
                    "gradcam_available": False,
                    "method": "Demo Mode",
                    "message": "This is a demo result - AI models not available"
                }
            else:
                return {
                    "status": "error",
                    "error": "No class labels available for demo mode",
                    "method": "Fallback"
                }
        
        # Load and predict using our classifier (real mode)
        from PIL import Image
        import numpy as np
        
        # Load image
        image = Image.open(image_path).convert('RGB')
        image_array = np.array(image)
        
        # Make prediction using our trained classifier
        result = classifier.predict(image_array)
        
        if result.get('success', False):
            # Convert to expected format
            predicted_class = result.get('predicted_class', 'unknown')
            confidence = result.get('confidence', 0.0)
            probabilities = result.get('probabilities', {})
            
            return {
                "status": "success",
                "predicted_class": predicted_class,
                "thai_name": predicted_class,  # Use predicted class as thai name
                "confidence": confidence,
                "probabilities": probabilities,
                "is_ood": confidence < 0.5,  # Low confidence = out of distribution
                "ood_score": 1.0 - confidence,
                "gradcam_available": False,
                "method": f"AI ({model_type})",
                "feature_count": result.get('feature_count', 0),
                "model_info": result.get('model_info', {}),
                "processing_time": 1.5  # Estimate
            }
        else:
            return {
                "status": "error",
                "error": result.get('error', 'Prediction failed'),
                "method": f"AI ({model_type})"
            }
            
    except Exception as e:
        import traceback
        error_detail = traceback.format_exc()
        print(f"AI prediction error: {error_detail}")
        return {
            "status": "error",
            "error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {str(e)}",
            "method": "AI (Error)"
        }

def display_classification_result(result, show_confidence=True, show_probabilities=True, image_path=None):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á HTML rendering"""
    
    # Check if this is demo mode
    is_demo_mode = result.get('demo_mode', False)
    system_message = result.get('system_message', '')
    
    # Show demo mode warning if applicable
    if is_demo_mode:
        st.warning(f"""
        üîß **‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Demo Mode)**
        
        {system_message}
        
        ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏£‡∏¥‡∏á
        
        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:
        - scikit-learn
        - joblib  
        - ‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô
        """)
    
    if result.get("status") == "success" or "predicted_class" in result:
        predicted_class = result.get('predicted_class', 'Unknown')
        thai_name = result.get('thai_name', predicted_class)
        confidence = result.get('confidence', 0)
        is_ood = result.get('is_ood', False)
        ood_score = result.get('ood_score', None)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        if is_ood:
            conf_color = "#ff6b6b"
            status_text = "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"
            status_emoji = "‚ö†Ô∏è"
            header_gradient = "linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%)"
        elif confidence >= 0.92:
            conf_color = "#4CAF50"
            status_text = "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
            status_emoji = "üåü"
            header_gradient = "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)"
        elif confidence >= 0.7:
            conf_color = "#FFA726"
            status_text = "‡∏î‡∏µ"
            status_emoji = "üëç"
            header_gradient = "linear-gradient(135deg, #fa709a 0%, #fee140 100%)"
        else:
            conf_color = "#EF5350"
            status_text = "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
            status_emoji = "ü§î"
            header_gradient = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
        st.markdown(f"""
        <div style="background: white; border-radius: 25px; padding: 50px; 
                    box-shadow: 0 15px 50px rgba(0,0,0,0.12); 
                    max-width: 1200px; width: 98vw; min-width: 350px; margin: 30px auto; 
                    border: 1px solid #e0e0e0;">
            
            <!-- Header -->
            <div style="background: {header_gradient}; color: white; padding: 40px; 
                        border-radius: 18px; margin-bottom: 35px; text-align: center; 
                        box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
                <div style="font-size: 3.5rem; margin-bottom: 12px;">üôè</div>
                <h1 style="margin: 0; font-size: 2.8rem; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.2);">
                    {thai_name}
                </h1>
                <h2 style="margin: 18px 0 0 0; font-size: 1.4rem; opacity: 0.95; font-weight: 500;">
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {predicted_class}
                </h2>
            </div>
            
            <!-- Confidence Section -->
            <div style="background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); 
                        padding: 40px; border-radius: 18px; margin: 35px 0; text-align: center;">
                <h2 style="color: #333; margin: 0 0 25px 0; font-size: 1.8rem;">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI</h2>
                <div style="font-size: 6rem; font-weight: bold; color: {conf_color}; margin: 25px 0; 
                            text-shadow: 3px 3px 6px rgba(0,0,0,0.1);">
                    {confidence:.0%}
                </div>
                <div style="margin: 25px 0;">
                    <span style="background: {conf_color}; color: white; padding: 12px 40px; 
                                border-radius: 50px; font-size: 1.4rem; font-weight: bold; 
                                display: inline-block; box-shadow: 0 4px 15px rgba(0,0,0,0.2);">
                        {status_emoji} {status_text}
                    </span>
                </div>
                <div style="background: #dee2e6; border-radius: 50px; height: 45px; overflow: hidden; 
                            margin: 30px auto; max-width: 85%; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);">
                    <div style="background: linear-gradient(90deg, {conf_color} 0%, {conf_color}dd 100%); 
                                width: {confidence*100}%; height: 100%; 
                                display: flex; align-items: center; justify-content: center;
                                color: white; font-weight: bold; font-size: 1.4rem;
                                transition: width 0.8s ease; border-radius: 50px;">
                        {confidence:.1%}
                    </div>
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        if is_ood:
            advice_html = """
            <div style="background: #fff3cd; border-left: 6px solid #ffc107; padding: 20px; border-radius: 10px; margin: 25px 0;">
                <p style="margin: 0; color: #856404; font-size: 1.08rem; line-height: 1.6;">
                    ‚ö†Ô∏è <strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ 
                    ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
                </p>
            </div>
            """
        elif confidence >= 0.92:
            advice_html = """
            <div style="background: #d4edda; border-left: 6px solid #28a745; padding: 20px; border-radius: 10px; margin: 25px 0;">
                <p style="margin: 0; color: #155724; font-size: 1.08rem; line-height: 1.6;">
                    ‚úÖ <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å:</strong> ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å AI ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ
                </p>
            </div>
            """
        elif confidence >= 0.7:
            advice_html = """
            <div style="background: #fff3cd; border-left: 6px solid #ffc107; padding: 20px; border-radius: 10px; margin: 25px 0;">
                <p style="margin: 0; color: #856404; font-size: 1.08rem; line-height: 1.6;">
                    ‚ö†Ô∏è <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á:</strong> ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
                </p>
            </div>
            """
        else:
            advice_html = """
            <div style="background: #f8d7da; border-left: 6px solid #dc3545; padding: 20px; border-radius: 10px; margin: 25px 0;">
                <p style="margin: 0; color: #721c24; font-size: 1.08rem; line-height: 1.6;">
                    ‚ùå <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥:</strong> ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                </p>
            </div>
            """
        
        st.markdown(advice_html, unsafe_allow_html=True)
        
        # Grad-CAM Section (‡πÉ‡∏ä‡πâ st.image ‡πÅ‡∏ó‡∏ô HTML img)
        if result.get('gradcam_available') and image_path:
            if 'gradcam_images' in st.session_state and image_path in st.session_state.gradcam_images:
                st.markdown("""
                <div style="margin: 35px 0; padding: 30px; background: #e3f2fd; border-radius: 15px; border-left: 8px solid #2196F3;">
                    <h2 style="color: #1565C0; margin: 0 0 10px 0; font-size: 1.6rem;">
                        üîç ‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡πâ‡∏ß‡∏¢ AI (Grad-CAM)
                    </h2>
                    <p style="color: #1976D2; font-size: 1rem; margin: 10px 0 20px 0; line-height: 1.6;">
                        üí° <strong>Grad-CAM Heatmap</strong> ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà AI ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç<br>
                        üî¥ <strong>‡∏™‡∏µ‡πÅ‡∏î‡∏á-‡∏™‡πâ‡∏°</strong> = ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á | 
                        üîµ <strong>‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß</strong> = ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡πâ‡∏≠‡∏¢
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("<h3 style='text-align: center; color: #333; font-size: 1.2rem;'>üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö</h3>", 
                               unsafe_allow_html=True)
                    st.image(image_path, use_container_width=True)
                with col2:
                    st.markdown("<h3 style='text-align: center; color: #333; font-size: 1.2rem;'>üî• Grad-CAM Heatmap</h3>", 
                               unsafe_allow_html=True)
                    gradcam_img = st.session_state.gradcam_images[image_path]
                    st.image(gradcam_img, use_container_width=True)
        
        # Top Predictions
        if show_probabilities and 'probabilities' in result:
            st.markdown("""
            <h2 style="color: #333; margin: 35px 0 20px 0; font-size: 1.6rem; 
                       border-bottom: 3px solid #667eea; padding-bottom: 10px;">
                üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Top 5)
            </h2>
            """, unsafe_allow_html=True)
            
            probs = result['probabilities']
            top_probs = sorted(probs.items(), key=lambda x: x[1], reverse=True)[:5]
            
            for idx, (class_name, prob) in enumerate(top_probs, 1):
                medal = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"#{idx}"
                bar_color = "#4CAF50" if idx == 1 else "#66BB6A" if idx == 2 else "#81C784" if idx == 3 else "#A5D6A7"
                
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.markdown(f"""
                    <div style="display: flex; align-items: center; gap: 15px; padding: 8px 0;">
                        <span style="font-size: 1.8rem;">{medal}</span>
                        <span style="font-size: 1.15rem; font-weight: 600; color: #333;">{class_name}</span>
                    </div>
                    """, unsafe_allow_html=True)
                    st.progress(prob)
                with col2:
                    st.markdown(f"""
                    <div style="font-size: 1.5rem; font-weight: bold; color: {bar_color}; 
                               text-align: right; padding-top: 8px;">
                        {prob:.1%}
                    </div>
                    """, unsafe_allow_html=True)
        
        # Tips (‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥)
        if confidence < 0.7 or is_ood:
            st.markdown("""
            <h2 style="color: #f57c00; margin: 35px 0 20px 0; font-size: 1.6rem; 
                       padding: 25px; background: #fff9e6; border-radius: 15px; 
                       border-left: 8px solid #ffc107;">
                üí° Tips: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ
            </h2>
            """, unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown("""
                <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; text-align: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 12px;">üí°</div>
                    <h3 style="color: #667eea; margin-bottom: 15px; font-size: 1.2rem;">‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á</h3>
                </div>
                """, unsafe_allow_html=True)
                st.markdown("""
                - ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
                - ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô
                - ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏∑‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                """)
            
            with col2:
                st.markdown("""
                <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; text-align: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 12px;">üì∏</div>
                    <h3 style="color: #667eea; margin-bottom: 15px; font-size: 1.2rem;">‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û</h3>
                </div>
                """, unsafe_allow_html=True)
                st.markdown("""
                - ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠
                - ‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡∏ß
                - ‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                """)
            
            with col3:
                st.markdown("""
                <div style="background: #f8f9fa; padding: 25px; border-radius: 12px; text-align: center;">
                    <div style="font-size: 2.5rem; margin-bottom: 12px;">üé®</div>
                    <h3 style="color: #667eea; margin-bottom: 15px; font-size: 1.2rem;">‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</h3>
                </div>
                """, unsafe_allow_html=True)
                st.markdown("""
                - ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö
                - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏ö‡∏î‡∏ö‡∏±‡∏á
                - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î‡∏î‡∏µ
                """)
        
        # Footer
        method_info = f"üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result.get('method', 'Unknown')}"
        if ood_score is not None:
            method_info += f" | üìä OOD Score: {ood_score:.4f}"
        
        st.markdown(f"""
            <div style="text-align: center; color: #999; font-size: 1rem; margin-top: 40px; 
                        padding-top: 25px; border-top: 2px solid #e0e0e0;">
                {method_info}
            </div>
        </div>
        """, unsafe_allow_html=True)
        
    else:
        # Error display - ‡∏Å‡πá‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
        error_msg = result.get('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏')
        st.markdown(f"""
        <div style="background: white; border-radius: 25px; padding: 50px; 
                    box-shadow: 0 15px 50px rgba(255,107,107,0.25); margin: 30px 0; 
                    border: 2px solid #ff6b6b;">
            <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%); 
                        color: white; padding: 35px; border-radius: 18px; text-align: center;
                        box-shadow: 0 6px 20px rgba(255,107,107,0.3);">
                <div style="font-size: 4rem; margin-bottom: 15px;">‚ùå</div>
                <h2 style="color: white; margin: 0; font-size: 2.2rem; font-weight: bold;">
                    ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                </h2>
            </div>
            <div style="background: #fff5f5; padding: 30px; border-radius: 15px; 
                        margin: 30px 0; border-left: 6px solid #ff6b6b;">
                <p style="font-family: monospace; font-size: 1.15rem; color: #333; 
                        margin: 0; line-height: 1.7; word-wrap: break-word;">
                    {error_msg}
                </p>
            </div>
            <div style="background: #fff3cd; padding: 25px; border-radius: 15px; 
                        border-left: 6px solid #ffc107;">
                <p style="margin: 0; color: #856404; font-size: 1.1rem; line-height: 1.7;">
                    üí° <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong><br>
                    ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• (best_model.pth, temperature_scaler.pth) ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô<br>
                    ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠ Restart Streamlit<br>
                    ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)

def main():
    # Initialize session state
    if 'front_camera_image' not in st.session_state:
        st.session_state.front_camera_image = None
    if 'back_camera_image' not in st.session_state:
        st.session_state.back_camera_image = None
    if 'analysis_history' not in st.session_state:
        st.session_state.analysis_history = []
    
    # Get logos
    amulet_logo = get_logo_base64()
    other_logos = get_other_logos()
    
    # Logo Header
    logo_left_html = ""
    if amulet_logo:
        logo_left_html = f'<img src="data:image/png;base64,{amulet_logo}" class="logo-img" alt="Amulet-AI">'
    
    logo_right_html = ""
    if 'thai_austrian' in other_logos:
        logo_right_html += f'<img src="data:image/gif;base64,{other_logos["thai_austrian"]}" class="logo-img-small" alt="Thai-Austrian">'
    if 'depa' in other_logos:
        logo_right_html += f'<img src="data:image/png;base64,{other_logos["depa"]}" class="logo-img-small" alt="DEPA">'
    
    st.markdown(f"""
    <div class="logo-header">
        <div class="logo-left">
            {logo_left_html}
            <div class="logo-text">
                <div class="logo-title">Amulet-AI </div>
                <div class="logo-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö ‡∏î‡πâ‡∏ß‡∏¢ Computer AI ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</div>
            </div>
        </div>
        <div class="logo-right">
            {logo_right_html}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # Default settings (no settings UI)
    analysis_mode = "‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (‡∏´‡∏ô‡πâ‡∏≤+‡∏´‡∏•‡∏±‡∏á)"
    show_confidence = True
    show_probabilities = True
    
    # Create Tabs for different sections
    tab1, tab2, tab3, tab4 = st.tabs(["üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "üìñ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö", "üìö ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"])
    
    # Tab 1: Main Upload Section
    with tab1:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        
        # Main Title and Description
        st.markdown("""
        <div style="text-align: center; margin-bottom: 2.5rem;">
            <h1 style="margin-bottom: 1rem; font-size: 3.5rem;">Amulet-AI </h1>
            <p style="font-size: 2.5rem; color: #495057; line-height: 1.9; max-width: 900px; margin: 0 auto 1rem;">
                ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ <strong style="color: #B8860B;">Deep Learning</strong> ‡πÅ‡∏•‡∏∞ <strong style="color: #B8860B;">Computer Vision</strong>
            </p>
            <p style="font-size: 2.3rem; color: #6c757d; line-height: 1.8; max-width: 850px; margin: 0 auto;">
                ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
        
        # Upload Section Header
        st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h2 style="margin-bottom: 0.5rem;">üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</h2>
            <p style="font-size: 1.15rem; color: #6c757d;">
                ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Always use dual image mode
        dual_image_mode(show_confidence, show_probabilities)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Tab 2: About System
    with tab2:
        # Introduction Section - 3 Cards
        show_introduction_section()
        
        st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
        
        # How It Works Section
        show_how_it_works_section()
        
        st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
        
        # Who Made This & Who Is This For
        show_about_section()
    
    # Tab 3: User Guide
    with tab3:
        show_tips_section()
    
    # Tab 4: FAQ
    with tab4:
        show_faq_section()
    
    # Footer with Credits
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                border-radius: 16px; padding: 2rem; border: 2px solid #dee2e6; margin: 2rem 0;
                box-shadow: 0 4px 15px rgba(108, 117, 125, 0.1);">
        <p style="font-size: 1.05rem; color: #495057; margin-bottom: 1rem; line-height: 1.8; font-family: 'Sarabun', sans-serif; text-align: center;">
            üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ì‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å <strong>‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• (depa)</strong><br>
            ‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏≠‡∏±‡∏ô‡∏ó‡∏£‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏° <strong>Taxes1112 ‚Äì ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏™‡∏±‡∏ï‡∏´‡∏µ‡∏ö</strong><br>
            ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô <strong>‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•</strong>
        </p>
        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 1.5rem 0;">
        <p style="text-align: center; font-size: 0.95rem; color: #6c757d; font-family: 'Sarabun', sans-serif; margin: 0;">
            ‚ÑπÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á<br>
            ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô<br>
            ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡∏∞‡πÅ‡∏ó‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏£‡∏∞‡πÄ‡∏Å‡πä
        </p>
    </div>
    """, unsafe_allow_html=True)

def dual_image_mode(show_confidence, show_probabilities):
    """‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô"""
    st.markdown("### ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô")
    
    col1, col2 = st.columns(2)
    
    # Front image
    with col1:
        st.markdown("#### ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        
        front_upload, front_camera = st.tabs(["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
        
        front_image = None
        
        with front_upload:
            front_image = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", type=['jpg', 'jpeg', 'png', 'bmp', 'gif', 'tiff', 'tif', 'webp', 'heic', 'heif'], key="front_upload")
        
        with front_camera:
            # Camera will only activate when user enters this tab
            camera_front = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", key="front_camera")
            if camera_front:
                st.session_state.front_camera_image = camera_front
                st.success("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        display_front = front_image or st.session_state.front_camera_image
        if display_front:
            st.image(display_front, caption="‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤", use_container_width=True)
    
    # Back image
    with col2:
        st.markdown("#### ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
        
        back_upload, back_camera = st.tabs(["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå", "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ"])
        
        back_image = None
        
        with back_upload:
            back_image = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", type=['jpg', 'jpeg', 'png', 'bmp', 'gif', 'tiff', 'tif', 'webp', 'heic', 'heif'], key="back_upload")
        
        with back_camera:
            # Camera will only activate when user enters this tab
            camera_back = st.camera_input("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", key="back_camera")
            if camera_back:
                st.session_state.back_camera_image = camera_back
                st.success("‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        display_back = back_image or st.session_state.back_camera_image
        if display_back:
            st.image(display_back, caption="‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á", use_container_width=True)
    
    st.markdown("---")
    
    final_front = front_image or st.session_state.front_camera_image
    final_back = back_image or st.session_state.back_camera_image
    
    if final_front and final_back:
        # Validate both files before processing
        validation_errors = []
        
        # Check front image
        if hasattr(final_front, 'size') and final_front.size > MAX_FILE_SIZE:
            validation_errors.append(f"‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({MAX_FILE_SIZE // (1024*1024)} MB)")
        
        # Check back image
        if hasattr(final_back, 'size') and final_back.size > MAX_FILE_SIZE:
            validation_errors.append(f"‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ({MAX_FILE_SIZE // (1024*1024)} MB)")
        
        if validation_errors:
            for error in validation_errors:
                st.error(error)
            return
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.success("‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
            
            if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô", type="primary", use_container_width=True):
                try:
                    with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô..."):
                        start_time = time.time()
                        
                        # Save temp paths for Grad-CAM
                        front_temp_path = f"temp_front_{final_front.name if hasattr(final_front, 'name') else 'front.jpg'}"
                        back_temp_path = f"temp_back_{final_back.name if hasattr(final_back, 'name') else 'back.jpg'}"
                        
                        try:
                            with open(front_temp_path, "wb") as f:
                                f.write(final_front.getbuffer())
                            with open(back_temp_path, "wb") as f:
                                f.write(final_back.getbuffer())
                        except Exception as e:
                            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {str(e)}")
                            return
                        
                        front_result = classify_image(final_front)
                        back_result = classify_image(final_back)
                    
                    processing_time = time.time() - start_time
                    
                    # Enhanced Results Display with new Enhanced Analysis Results
                    try:
                        from frontend.components.enhanced_results import EnhancedAnalysisResults
                        enhanced_results = EnhancedAnalysisResults()
                        
                        # Process results for enhanced display
                        front_enhanced = enhance_result_for_display(front_result, processing_time / 2, 'dual_image')
                        back_enhanced = enhance_result_for_display(back_result, processing_time / 2, 'dual_image')
                        
                        st.markdown("### üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown('<div class="result-section">', unsafe_allow_html=True)
                            st.markdown("#### üì∏ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
                            enhanced_results.display_enhanced_results(front_enhanced, 'dual_image')
                            st.markdown('</div>', unsafe_allow_html=True)
                        
                        with col2:
                            st.markdown('<div class="result-section">', unsafe_allow_html=True)
                            st.markdown("#### üì∏ ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
                            enhanced_results.display_enhanced_results(back_enhanced, 'dual_image')
                            st.markdown('</div>', unsafe_allow_html=True)
                            
                    except ImportError as e:
                        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Enhanced Results Component: {e}")
                        # Fallback to old display method
                        st.markdown("### ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                        
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown('<div class="result-card">', unsafe_allow_html=True)
                            st.markdown("#### ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
                            display_classification_result(front_result, show_confidence, show_probabilities, front_temp_path)
                            st.markdown('</div>', unsafe_allow_html=True)
                        
                        with col2:
                            st.markdown('<div class="result-card">', unsafe_allow_html=True)
                            st.markdown("#### ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á")
                            display_classification_result(back_result, show_confidence, show_probabilities, back_temp_path)
                            st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Comparison
                    if (front_result.get("status") == "success" and back_result.get("status") == "success"):
                        front_class = front_result.get("predicted_class", "")
                        back_class = back_result.get("predicted_class", "")
                        front_conf = front_result.get("confidence", 0)
                        back_conf = back_result.get("confidence", 0)
                        
                        st.markdown("### ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö")
                        
                        if front_class == back_class:
                            st.markdown(f"""
                            <div class="success-box">
                                <h4>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô!</h4>
                                <p style="font-size: 1.1rem;"><strong>‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô:</strong> {front_class}</p>
                                <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:</strong> {(front_conf + back_conf) / 2:.1%}</p>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown(f"""
                            <div class="warning-box">
                                <h4>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô</h4>
                                <p><strong>‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤:</strong> {front_class} ({front_conf:.1%})</p>
                                <p><strong>‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á:</strong> {back_class} ({back_conf:.1%})</p>
                                <p>‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                        st.session_state.analysis_history.append({
                            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "front_result": front_result,
                            "back_result": back_result,
                            "processing_time": processing_time,
                            "mode": "dual"
                        })
                        
                        # Clean up temp files
                        try:
                            Path(front_temp_path).unlink(missing_ok=True)
                            Path(back_temp_path).unlink(missing_ok=True)
                        except:
                            pass  # Ignore cleanup errors
                            
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}")
                    # Clean up temp files on error
                    try:
                        Path(front_temp_path).unlink(missing_ok=True)
                        Path(back_temp_path).unlink(missing_ok=True)
                    except:
                        pass
    else:
        st.markdown("""
        <div class="info-box">
            <h3>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</h3>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏•‡∏±‡∏á)</p>
            <p>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
        </div>
        """, unsafe_allow_html=True)

def show_faq_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢"""
    st.markdown("## ‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ (FAQ)")
    st.markdown("<p style='text-align: center; font-size: 1.3rem; color: #6c757d;'>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>", unsafe_allow_html=True)
    
    # Expectations & Limitations
    st.markdown("""
    <div class="warning-box">
        <h3>‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏£ (Expectations & Limitations)</h3>
        <p><strong>‚Ä¢ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</strong> ‚Äî ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ 100%</p>
        <p><strong>‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</strong> ‚Äî ‡∏£‡∏π‡∏õ‡∏ä‡∏±‡∏î ‡πÅ‡∏™‡∏á‡∏î‡∏µ ‡∏°‡∏∏‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á = ‡∏ú‡∏•‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô</p>
        <p><strong>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥</strong> ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</p>
        <p><strong>‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</strong> ‚Äî ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # Privacy Notice
    st.markdown("""
    <div class="info-box">
        <h3>üîí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (Privacy)</h3>
        <p><strong>‚Ä¢ ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</p>
        <p><strong>‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</p>
        <p><strong>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™</strong> ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    # Common Questions
    st.markdown("### üí° ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢")
    
    with st.expander("‚ùì ‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?"):
        st.markdown("""
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢:
        - **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û**: ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î ‡πÅ‡∏™‡∏á‡∏î‡∏µ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
        - **‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á**: ‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏°‡∏µ dataset ‡∏°‡∏≤‡∏Å‡∏à‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤
        - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô >90%**: ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
        - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô 70-90%**: ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        - **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô <70%**: ‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
        """)
    
    with st.expander("‚ùì ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå?"):
        st.markdown("""
        - **‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢**: 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏û
        - **‡∏†‡∏≤‡∏û‡∏Ñ‡∏π‡πà (‡∏´‡∏ô‡πâ‡∏≤+‡∏´‡∏•‡∏±‡∏á)**: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5-10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        - ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
        """)
    
    with st.expander("‚ùì ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á?"):
        st.markdown("""
        - **‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö**: JPG, JPEG, PNG, BMP, GIF, TIFF, WebP, HEIC/HEIF
        - **‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î**: 10 MB
        - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**: ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 800x800 pixels
        """)
    
    with st.expander("‚ùì ‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?"):
        st.markdown("""
        1. **‡∏•‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà** ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏™‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        2. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠** ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏ö‡∏î‡∏ö‡∏±‡∏á‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        3. **‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô** ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ AI ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à
        4. **‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        5. **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤** ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        """)
    
    with st.expander("‚ùì ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
        st.markdown("""
        - **‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô**: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
        - **‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°**: ‡∏£‡∏π‡∏õ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ï‡∏ô)
        - **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠
        - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢**: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≤‡∏Å‡∏•
        """)
    
    with st.expander("‚ùì ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
        st.markdown("""
        **‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ!** ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠:
        - ‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠
        - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πà
        - ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        """)
    
    with st.expander("‚ùì ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
        st.markdown("""
        - **‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ
        - **‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï**: ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        - **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç/‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢**: ‡∏°‡∏µ API ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        """)
    
    with st.expander("‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?"):
        st.markdown("""
        - **‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠**: ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "üìö ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        - **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö**: ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "üìñ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"
        - **‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤**: ‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Footer
        """)

def show_introduction_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£"""
    st.markdown("## üìã ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£")
    st.markdown("<p style='text-align: center; font-size: 1.3rem; color: #6c757d;'>‡∏£‡∏∞‡∏ö‡∏ö Amulet-AI ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <h3>üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å</h3>
            <ul>
                <li>‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</li>
                <li>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á</li>
                <li>‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢</li>
                <li>‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà AI ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</li>
                <li>‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <h3>‚ö° ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢</h3>
            <ul>
                <li>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</li>
                <li>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏≠‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</li>
                <li>‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö</li>
                <li>‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°</li>
                <li>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <h3>üîí ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</h3>
            <ul>
                <li>‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</li>
                <li>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</li>
                <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</li>
                <li>‡πÑ‡∏°‡πà‡πÅ‡∏ä‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï</li>
                <li>‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def show_how_it_works_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 3 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô"""
    st.markdown("## üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£")
    st.markdown("<p style='text-align: center; font-size: 1.3rem; color: #6c757d;'>‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô</p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="step-card">
            <h3>üìÅ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1</h3>
            <h4>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h4>
            <p>‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤/‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå JPG, PNG</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="step-card">
            <h3>ü§ñ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2</h3>
            <h4>AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</h4>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û ‡∏î‡∏∂‡∏á‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="step-card">
            <h3>üìä ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3</h3>
            <h4>‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</h4>
            <p>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå, ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p>
        </div>
        """, unsafe_allow_html=True)

def show_about_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"""
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="info-box">
            <h3>üë• ‡πÉ‡∏Ñ‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ</h3>
            <p><strong>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</strong> ‡∏î‡πâ‡∏≤‡∏ô Machine Learning, Computer Vision ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</p>
            <p><strong>‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢</strong> ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏™‡∏∞‡∏™‡∏°‡∏û‡∏£‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</p>
            <p><strong>‡∏à‡∏∏‡∏î‡∏°‡∏∏‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢:</strong> ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="info-box">
            <h3>üéØ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£</h3>
            <p><strong>‚Ä¢ ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</strong> - ‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</p>
            <p><strong>‚Ä¢ ‡∏ô‡∏±‡∏Å‡∏™‡∏∞‡∏™‡∏°/‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤</strong> - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢</p>
            <p><strong>‚Ä¢ ‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤/‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏à‡∏±‡∏¢</strong> - ‡∏™‡∏ô‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ dataset (‡∏°‡∏µ API ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)</p>
            <p><strong>‚Ä¢ ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI</strong> - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ AI ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡πÅ‡∏ô‡∏Å</p>
        </div>
        """, unsafe_allow_html=True)

def show_tips_section():
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    st.markdown('<div class="section-divider"></div>', unsafe_allow_html=True)
    
    st.markdown("## üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    st.markdown("<p style='text-align: center; font-size: 1.3rem; color: #6c757d;'>‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>", unsafe_allow_html=True)
    
    # Quick Start Guide
    st.markdown("""
    <div class="tips-card">
        <h3>üöÄ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ (Quick Start)</h3>
        <ol style="font-size: 1.2rem; line-height: 2;">
            <li><strong>‡∏Å‡∏î üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ</strong> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏ö‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á</li>
            <li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</strong> (Preview) ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</li>
            <li><strong>‡∏Å‡∏î üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</strong> (‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏†‡∏≤‡∏û)</li>
            <li><strong>‡∏£‡∏≠‡∏ú‡∏•</strong> ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏´‡∏°‡∏∏‡∏ô</li>
            <li><strong>‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•</strong> ‚Äî ‡∏î‡∏π Top-1/Top-3, ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü</li>
            <li><strong>‡∏ñ‡πâ‡∏≤‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î</strong> ‚Üí ‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="tips-card">
            <h3>üì∏ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏î‡∏µ</h3>
            <ul>
                <li><strong>‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠</strong> (‡πÑ‡∏°‡πà‡∏¢‡πâ‡∏≠‡∏ô‡πÅ‡∏™‡∏á)</li>
                <li><strong>‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö</strong> (‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡πâ‡∏≤‡∏Ç‡∏≤‡∏ß / ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏™‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö)</li>
                <li><strong>‡∏†‡∏≤‡∏û‡∏ä‡∏±‡∏î ‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏•‡∏≠</strong> ‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô</li>
                <li><strong>‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏á‡∏Ñ‡πå</strong> ‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏≠‡∏Å</li>
                <li><strong>‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏á‡∏≤</strong> ‡∏ö‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á</li>
                <li><strong>‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£</strong> ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="tips-card">
            <h3>üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h3>
            <ul>
                <li><strong>‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 90%</strong><br/>üéØ <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á</strong> ‚Äî ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠</li>
                <li><strong>70-90%</strong><br/>‚úÖ <strong>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏î‡∏µ</strong> ‚Äî ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</li>
                <li><strong>50-70%</strong><br/>‚ö†Ô∏è <strong>‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°</strong> ‚Äî ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà</li>
                <li><strong>‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50%</strong><br/>‚ùå <strong>‡∏Ñ‡∏ß‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà</strong> ‚Äî ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç</li>
                <li><strong>‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</strong> ‚Äî ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="tips-card">
            <h3>üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö</h3>
            <ul>
                <li>‡∏û‡∏£‡∏∞‡∏®‡∏¥‡∏ß‡∏•‡∏µ</li>
                <li>‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à</li>
                <li>‡∏õ‡∏£‡∏Å‡πÇ‡∏û‡∏ò‡∏¥‡πå 9 ‡πÉ‡∏ö</li>
                <li>‡πÅ‡∏´‡∏ß‡∏Å‡∏°‡πà‡∏≤‡∏ô</li>
                <li>‡∏´‡∏•‡∏±‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô</li>
                <li>‡∏ß‡∏±‡∏î‡∏´‡∏ô‡∏≠‡∏á‡∏≠‡∏µ‡∏î‡∏∏‡∏Å</li>
            </ul>
            <p style="margin-top: 20px; font-size: 1.1rem;"><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Warning Card
    st.markdown("""
    <div class="error-box">
        <h3>‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç</h3>
        <p style="font-size: 1.3rem; line-height: 1.9;">
            <strong>‚Ä¢ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô</strong> ‚Äî ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢<br/>
            <strong>‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</strong> ‚Äî ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á<br/>
            <strong>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡πâ</strong> ‚Äî ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô<br/>
            <strong>‚Ä¢ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠</strong> ‚Äî ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ / FAQ ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π Documentation
        </p>
    </div>
    """, unsafe_allow_html=True)
