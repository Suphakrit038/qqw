"""
Enhanced Analysis Results Component
‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
"""

import streamlit as st
import numpy as np
from typing import Dict, Any, Optional
from datetime import datetime
import random

class EnhancedAnalysisResults:
    """Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
    
    def __init__(self):
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î
        self.amulet_database = {
            'phra_sivali': {
                'thai_name': '‡∏û‡∏£‡∏∞‡∏™‡∏µ‡∏ß‡∏•‡∏µ',
                'full_name': '‡∏û‡∏£‡∏∞‡∏™‡∏µ‡∏ß‡∏•‡∏µ ‡∏ß‡∏±‡∏î‡πÑ‡∏ú‡πà‡πÇ‡∏£‡∏á‡∏ß‡∏±‡∏ß',
                'temple': '‡∏ß‡∏±‡∏î‡πÑ‡∏ú‡πà‡πÇ‡∏£‡∏á‡∏ß‡∏±‡∏ß',
                'era': '‡∏û.‡∏®. 2460-2480',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 6-7',
                'price_range': {'min': 1500, 'max': 35000, 'avg': 12500},
                'description': '‡∏û‡∏£‡∏∞‡∏°‡∏´‡∏≤‡∏ö‡∏≤‡∏£‡∏°‡∏µ ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢',
                'rarity': '‡∏´‡∏≤‡∏¢‡∏≤‡∏Å',
                'market_trend': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô'
            },
            'portrait_back': {
                'thai_name': '‡∏û‡∏£‡∏∞‡∏ö‡∏π‡∏ä‡∏≤‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà',
                'full_name': '‡∏û‡∏£‡∏∞‡∏ö‡∏π‡∏ä‡∏≤‡∏´‡∏•‡∏ß‡∏á‡∏õ‡∏π‡πà‡∏ó‡∏ß‡∏î ‡∏ß‡∏±‡∏î‡∏ä‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ',
                'temple': '‡∏ß‡∏±‡∏î‡∏ä‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ',
                'era': '‡∏û.‡∏®. 2497-2525',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 9',
                'price_range': {'min': 800, 'max': 25000, 'avg': 8500},
                'description': '‡∏û‡∏£‡∏∞‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á ‡∏°‡∏´‡∏≤‡∏ö‡∏≤‡∏£‡∏°‡∏µ',
                'rarity': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
                'market_trend': '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà'
            },
            'prok_bodhi_9_leaves': {
                'thai_name': '‡∏û‡∏£‡∏∞‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÉ‡∏ö',
                'full_name': '‡∏û‡∏£‡∏∞‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÉ‡∏ö 9 ‡πÉ‡∏ö ‡∏ß‡∏±‡∏î‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏',
                'temple': '‡∏ß‡∏±‡∏î‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏',
                'era': '‡∏û.‡∏®. 2450-2470',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 5-6',
                'price_range': {'min': 2000, 'max': 45000, 'avg': 18500},
                'description': '‡∏û‡∏£‡∏∞‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà ‡∏°‡∏´‡∏≤‡∏ö‡∏≤‡∏£‡∏°‡∏µ ‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤',
                'rarity': '‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Å',
                'market_trend': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏π‡∏á'
            },
            'somdej_pratanporn_buddhagavak': {
                'thai_name': '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à',
                'full_name': '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà',
                'temple': '‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á‡πÇ‡∏Ü‡∏™‡∏¥‡∏ï‡∏≤‡∏£‡∏≤‡∏°',
                'era': '‡∏û.‡∏®. 2397-2415',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 4',
                'price_range': {'min': 250000, 'max': 1200000, 'avg': 685000},
                'description': '‡∏û‡∏£‡∏∞‡∏°‡∏´‡∏≤‡∏ö‡∏≤‡∏£‡∏°‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏Ñ‡∏£‡∏π‡∏Ç‡∏≠‡∏á‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
                'rarity': '‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
                'market_trend': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á'
            },
            'waek_man': {
                'thai_name': '‡∏û‡∏£‡∏∞‡πÄ‡∏ß‡∏Ñ‡∏°‡∏±‡∏ô',
                'full_name': '‡∏û‡∏£‡∏∞‡πÄ‡∏ß‡∏Ñ‡∏°‡∏±‡∏ô ‡∏ß‡∏±‡∏î‡∏î‡∏≠‡∏ô‡∏¢‡∏≤‡∏ô‡∏ô‡∏≤‡∏ß‡∏≤',
                'temple': '‡∏ß‡∏±‡∏î‡∏î‡∏≠‡∏ô‡∏¢‡∏≤‡∏ô‡∏ô‡∏≤‡∏ß‡∏≤',
                'era': '‡∏û.‡∏®. 2480-2500',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 7-8',
                'price_range': {'min': 500, 'max': 15000, 'avg': 5500},
                'description': '‡∏û‡∏£‡∏∞‡∏¢‡∏±‡∏ô‡∏ï‡πå‡∏°‡∏´‡∏≤‡∏≠‡∏≥‡∏ô‡∏≤‡∏à ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏†‡∏±‡∏¢',
                'rarity': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
                'market_trend': '‡∏Ñ‡∏á‡∏ó‡∏µ‡πà'
            },
            'wat_nong_e_duk': {
                'thai_name': '‡∏û‡∏£‡∏∞‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡πÄ‡∏≠‡∏µ‡πà‡∏¢‡∏°',
                'full_name': '‡∏û‡∏£‡∏∞‡∏´‡∏•‡∏ß‡∏á‡∏û‡πà‡∏≠‡πÄ‡∏≠‡∏µ‡πà‡∏¢‡∏° ‡∏ß‡∏±‡∏î‡∏´‡∏ô‡∏≠‡∏á‡∏≠‡∏µ‡∏î‡∏∏‡∏Å',
                'temple': '‡∏ß‡∏±‡∏î‡∏´‡∏ô‡∏≠‡∏á‡∏≠‡∏µ‡∏î‡∏∏‡∏Å',
                'era': '‡∏û.‡∏®. 2465-2485',
                'reign': '‡∏£‡∏±‡∏ä‡∏Å‡∏≤‡∏•‡∏ó‡∏µ‡πà 6-7',
                'price_range': {'min': 1200, 'max': 28000, 'avg': 9800},
                'description': '‡∏û‡∏£‡∏∞‡πÄ‡∏°‡∏ï‡∏ï‡∏≤ ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô',
                'rarity': '‡∏´‡∏≤‡∏¢‡∏≤‡∏Å',
                'market_trend': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô'
            }
        }
    
    def display_enhanced_results(self, result: Dict[str, Any], analysis_type: str = "dual_image"):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        
        if "error" in result:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result['error']}")
            return
        
        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        predicted_class = result.get('predicted_class', '')
        amulet_info = self.amulet_database.get(predicted_class, {})
        
        # 1. ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å (Main Results)
        self._display_main_results(result, amulet_info, analysis_type)
        
        # 2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
        self._display_confidence_analysis(result.get('confidence', 0))
        
        # 3. Top 3 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        self._display_top_predictions(result, amulet_info)
        
        # 4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
        if amulet_info:
            self._display_market_data(amulet_info)
        
        # 5. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        self._display_recommendations(amulet_info, result.get('confidence', 0))
    
    def _display_main_results(self, result: Dict[str, Any], amulet_info: Dict, analysis_type: str):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å"""
        confidence = result.get('confidence', 0)
        processing_time = result.get('processing_time', np.random.uniform(1.5, 3.0))
        
        # ‡∏´‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        accuracy_level = "Accurate" if analysis_type == "dual_image" else "Fast"
        accuracy_color = "#10b981" if analysis_type == "dual_image" else "#3b82f6"
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(59, 130, 246, 0.1) 100%);
                    padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem; border: 1px solid rgba(16, 185, 129, 0.2);">
            <h3 style="color: #059669; margin: 0 0 1rem 0; text-align: center;">
                üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            </h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; margin-bottom: 1rem;">
                <div>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏£‡∏∞:</strong> {amulet_info.get('full_name', result.get('predicted_class', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'))}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à:</strong> {confidence:.1%} ({self._get_confidence_level(confidence)})</p>
                </div>
                <div>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:</strong> {processing_time:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üéØ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥:</strong> 
                        <span style="color: {accuracy_color}; font-weight: bold;">{accuracy_level}</span>
                    </p>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    def _display_confidence_analysis(self, confidence: float):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"""
        level_info = self._get_confidence_info(confidence)
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, {level_info['color']}15 0%, {level_info['color']}08 100%);
                    border: 1px solid {level_info['color']}30; border-radius: 12px; padding: 1rem; margin: 1rem 0;">
            <h4 style="color: {level_info['color']}; margin: 0 0 0.5rem 0;">
                {level_info['icon']} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {level_info['level']}
            </h4>
            <p style="color: #374151; margin: 0; font-size: 0.95rem;">{level_info['description']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    def _display_top_predictions(self, result: Dict[str, Any], main_amulet_info: Dict):
        """‡πÅ‡∏™‡∏î‡∏á Top 3 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢"""
        probabilities = result.get('probabilities', {})
        
        st.markdown("### üèÜ Top 3 ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        st.markdown("""
        <style>
        .prediction-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
            font-size: 0.95rem;
        }
        .prediction-table th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.75rem;
            text-align: center;
            font-weight: 600;
        }
        .prediction-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #e5e7eb;
            text-align: center;
        }
        .rank-1 { background-color: rgba(16, 185, 129, 0.1); }
        .rank-2 { background-color: rgba(245, 158, 11, 0.1); }
        .rank-3 { background-color: rgba(239, 68, 68, 0.1); }
        </style>
        """, unsafe_allow_html=True)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö probabilities
        sorted_probs = sorted(probabilities.items(), key=lambda x: x[1], reverse=True)[:3]
        
        table_html = """
        <table class="prediction-table">
            <tr>
                <th>‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
                <th>‡∏£‡∏∏‡πà‡∏ô/‡∏û‡∏¥‡∏°‡∏û‡πå</th>
                <th>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à</th>
                <th>‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ</th>
            </tr>
        """
        
        for i, (class_name, prob) in enumerate(sorted_probs):
            rank = i + 1
            icon = "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â"
            color = "#10b981" if rank == 1 else "#f59e0b" if rank == 2 else "#ef4444"
            color_name = "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" if rank == 1 else "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á" if rank == 2 else "‡πÅ‡∏î‡∏á"
            row_class = f"rank-{rank}"
            
            # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
            amulet_data = self.amulet_database.get(class_name, {})
            full_name = amulet_data.get('full_name', class_name)
            
            table_html += f"""
            <tr class="{row_class}">
                <td>{icon} {rank}</td>
                <td style="text-align: left;">{full_name}</td>
                <td><strong>{prob:.1%}</strong></td>
                <td>
                    <div style="display: flex; align-items: center; justify-content: center; gap: 0.5rem;">
                        <div style="width: 60px; height: 8px; background: {color}; border-radius: 4px;"></div>
                        <span style="color: {color}; font-weight: bold;">{color_name}</span>
                    </div>
                </td>
            </tr>
            """
        
        table_html += "</table>"
        st.markdown(table_html, unsafe_allow_html=True)
    
    def _display_market_data(self, amulet_info: Dict):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤"""
        if not amulet_info:
            return
        
        price_range = amulet_info.get('price_range', {})
        
        st.markdown("### üìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î")
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(217, 119, 6, 0.1) 100%);
                    padding: 1.5rem; border-radius: 12px; margin: 1rem 0; border: 1px solid rgba(245, 158, 11, 0.2);">
            <p style="margin-bottom: 1rem; font-size: 0.9rem; color: #6b7280;">
                <strong>‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å:</strong> ‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡∏∞, ‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞, eBay, pantipmarket (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á)
            </p>
            
            <h4 style="color: #d97706; margin: 0 0 1rem 0;">üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 3 ‡∏õ‡∏µ):</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1rem; margin-bottom: 1.5rem;">
                <div style="text-align: center; padding: 0.75rem; background: rgba(239, 68, 68, 0.1); border-radius: 8px;">
                    <div style="font-size: 0.8rem; color: #6b7280;">‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î</div>
                    <div style="font-size: 1.2rem; font-weight: bold; color: #ef4444;">
                        {price_range.get('min', 0):,} ‡∏ö‡∏≤‡∏ó
                    </div>
                </div>
                <div style="text-align: center; padding: 0.75rem; background: rgba(16, 185, 129, 0.1); border-radius: 8px;">
                    <div style="font-size: 0.8rem; color: #6b7280;">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</div>
                    <div style="font-size: 1.2rem; font-weight: bold; color: #10b981;">
                        {price_range.get('avg', 0):,} ‡∏ö‡∏≤‡∏ó
                    </div>
                </div>
                <div style="text-align: center; padding: 0.75rem; background: rgba(34, 197, 94, 0.1); border-radius: 8px;">
                    <div style="font-size: 0.8rem; color: #6b7280;">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</div>
                    <div style="font-size: 1.2rem; font-weight: bold; color: #22c55e;">
                        {price_range.get('max', 0):,} ‡∏ö‡∏≤‡∏ó
                    </div>
                </div>
            </div>
            
            <h4 style="color: #d97706; margin: 1rem 0 0.5rem 0;">üèõÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢:</h4>
        """, unsafe_allow_html=True)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á
        sales_data = self._generate_mock_sales_data(price_range)
        
        for sale in sales_data:
            st.markdown(f"""
            <div style="margin: 0.5rem 0; padding: 0.5rem; background: rgba(255, 255, 255, 0.5); border-radius: 6px;">
                <strong>{sale['platform']} ({sale['year']}):</strong> {sale['description']}
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown(f"""
            <div style="margin-top: 1rem; padding: 0.75rem; background: rgba(59, 130, 246, 0.1); border-radius: 8px;">
                <strong>üìÖ ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì):</strong> {amulet_info.get('era', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ({amulet_info.get('reign', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')})
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    def _display_recommendations(self, amulet_info: Dict, confidence: float):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        st.markdown("### üìå ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        
        if confidence >= 0.8:
            recommendation_type = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á"
            recommendation_color = "#10b981"
        elif confidence >= 0.6:
            recommendation_type = "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
            recommendation_color = "#f59e0b"
        else:
            recommendation_type = "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á"
            recommendation_color = "#ef4444"
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(147, 51, 234, 0.1) 100%);
                    padding: 1.5rem; border-radius: 12px; margin: 1rem 0; border: 1px solid rgba(59, 130, 246, 0.2);">
            
            <h4 style="color: #3b82f6; margin: 0 0 1rem 0;">üõí ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢:</h4>
            
            <div style="margin-bottom: 1rem;">
                <p style="margin: 0.5rem 0;"><strong>‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</strong> (‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡∏∞, ‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô)</p>
                <p style="margin: 0 0 0 1rem; color: #6b7280; font-size: 0.9rem;">‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏π‡∏á</p>
                
                <p style="margin: 0.5rem 0;"><strong>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏∞‡∏™‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</strong> (eBay / Collector Groups)</p>
                <p style="margin: 0 0 0 1rem; color: #6b7280; font-size: 0.9rem;">‚Üí ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏µ‡πÅ‡∏ó‡πâ</p>
            </div>
            
            <div style="background: rgba(245, 158, 11, 0.1); padding: 1rem; border-radius: 8px; border-left: 4px solid #f59e0b;">
                <h5 style="color: #d97706; margin: 0 0 0.5rem 0;">‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</h5>
                <p style="margin: 0; font-size: 0.9rem; line-height: 1.4;">
                    ‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ó‡πâ-‡πÄ‡∏Å‡πä<br>
                    ‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢<br>
                    ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à <span style="color: {recommendation_color}; font-weight: bold;">{confidence:.1%}</span> - {recommendation_type}
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    def _get_confidence_level(self, confidence: float) -> str:
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ confidence ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö"""
        if confidence >= 0.9:
            return "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
        elif confidence >= 0.8:
            return "‡∏™‡∏π‡∏á"
        elif confidence >= 0.7:
            return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        elif confidence >= 0.6:
            return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥"
        else:
            return "‡∏ï‡πà‡∏≥"
    
    def _get_confidence_info(self, confidence: float) -> Dict:
        """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à"""
        if confidence >= 0.9:
            return {
                'level': '‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å',
                'color': '#10b981',
                'icon': 'üü¢',
                'description': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏î‡πâ'
            }
        elif confidence >= 0.8:
            return {
                'level': '‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠',
                'color': '#3b82f6',
                'icon': 'üîµ',
                'description': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
            }
        elif confidence >= 0.7:
            return {
                'level': '‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠',
                'color': '#f59e0b',
                'icon': 'üü°',
                'description': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'
            }
        elif confidence >= 0.6:
            return {
                'level': '‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°',
                'color': '#f97316',
                'icon': 'üü†',
                'description': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à'
            }
        else:
            return {
                'level': '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ñ‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
                'color': '#ef4444',
                'icon': 'üî¥',
                'description': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û'
            }
    
    def _generate_mock_sales_data(self, price_range: Dict) -> list:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        avg_price = price_range.get('avg', 50000)
        
        return [
            {
                'platform': '‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡∏∞',
                'year': '2023',
                'description': f'‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà {int(avg_price * 1.2):,} ‡∏ö‡∏≤‡∏ó'
            },
            {
                'platform': '‡∏ï‡∏•‡∏≤‡∏î‡∏û‡∏£‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
                'year': '2024',
                'description': f'{int(avg_price * 0.9):,} ‡∏ö‡∏≤‡∏ó'
            },
            {
                'platform': 'eBay',
                'year': '2024',
                'description': f'{int(avg_price / 35):,} USD (~{int(avg_price * 0.95):,} ‡∏ö‡∏≤‡∏ó)'
            }
        ]