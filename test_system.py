#!/usr/bin/env python3
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Amulet AI ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
Testing Complete Amulet AI System
"""

import sys
import os
from pathlib import Path
import traceback
import time
import numpy as np
from PIL import Image

# Add project root to path
project_root = Path(__file__).resolve().parent
sys.path.append(str(project_root))

def test_ai_classifier():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Classifier"""
    print("=" * 60)
    print("ü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Classifier")
    print("=" * 60)
    
    try:
        from ai_models.updated_classifier import get_updated_classifier, check_model_availability
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
        availability = check_model_availability()
        print(f"üìä Model Available: {availability['available']}")
        print(f"üí¨ Message: {availability['message']}")
        
        if availability['available']:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á...")
            classifier = get_updated_classifier()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            test_image = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
            
            start_time = time.time()
            result = classifier.predict(test_image)
            processing_time = time.time() - start_time
            
            print(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {processing_time:.3f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            if result['success']:
                print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                print(f"   üéØ ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {result['predicted_class']}")
                print(f"   üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result['confidence']:.4f}")
                print(f"   üßÆ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: {result['feature_count']}")
                
                print(f"\nüìà Top 3 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô:")
                sorted_probs = sorted(result['probabilities'].items(), 
                                    key=lambda x: x[1], reverse=True)[:3]
                for i, (class_name, prob) in enumerate(sorted_probs):
                    icon = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"
                    print(f"   {icon} {class_name}: {prob:.4f}")
                
                return True
            else:
                print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result['error']}")
                return False
        else:
            print("‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        traceback.print_exc()
        return False

def test_frontend_components():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend Components"""
    print("\n" + "=" * 60)
    print("üé® ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend Components")
    print("=" * 60)
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Analysis Results Component
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Analysis Results Component...")
        from frontend.components.analysis_results import AnalysisResultsComponent
        
        analysis_component = AnalysisResultsComponent()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á
        mock_result = {
            'thai_name': '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à',
            'confidence': 0.87,
            'predicted_class': 'somdej',
            'probabilities': {
                '‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à': 0.87,
                '‡∏û‡∏£‡∏∞‡∏ô‡∏≤‡∏á‡∏û‡∏ç‡∏≤': 0.08,
                '‡∏û‡∏£‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å': 0.05
            },
            'processing_time': 1.5,
            'analysis_type': 'single_image',
            'enhanced_features': {
                'image_quality': {
                    'overall_score': 0.92,
                    'quality_level': 'excellent',
                    'was_enhanced': True
                },
                'auto_enhanced': True,
                'dual_analysis': False
            }
        }
        
        print("‚úÖ Analysis Results Component ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö components ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Components ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ...")
        
        from frontend.components.file_uploader import FileUploaderComponent
        from frontend.components.image_display import ImageDisplayComponent
        from frontend.components.mode_selector import ModeSelectorComponent
        
        print("‚úÖ ‡∏ó‡∏∏‡∏Å Frontend Components ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Frontend Components: {str(e)}")
        traceback.print_exc()
        return False

def test_core_modules():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Core Modules"""
    print("\n" + "=" * 60)
    print("‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Core Modules")
    print("=" * 60)
    
    try:
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling...")
        from core.error_handling_enhanced import error_handler, validate_image_file
        print("‚úÖ Error Handling ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Core Config...")
        from core.config import get_config
        print("‚úÖ Core Config ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Performance Monitoring...")
        from core.performance_monitoring import monitor_performance
        print("‚úÖ Performance Monitoring ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô Core Modules: {str(e)}")
        traceback.print_exc()
        return False

def test_training_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏ô"""
    print("\n" + "=" * 60)
    print("üèãÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏ô")
    print("=" * 60)
    
    try:
        from trained_model.train_ai_model import AmuletAITrainer
        
        print("‚úÖ Training System ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        trained_model_path = Path("trained_model")
        if trained_model_path.exists():
            required_files = [
                "classifier.joblib",
                "scaler.joblib", 
                "label_encoder.joblib",
                "pca.joblib",
                "labels.json",
                "training_info.json"
            ]
            
            print("üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÅ‡∏•‡πâ‡∏ß:")
            for file_name in required_files:
                file_path = trained_model_path / file_name
                status = "‚úÖ" if file_path.exists() else "‚ùå"
                print(f"   {status} {file_name}")
            
            missing_files = [f for f in required_files if not (trained_model_path / f).exists()]
            if not missing_files:
                print("üéâ ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
                return True
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: {missing_files}")
                return False
        else:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå trained_model")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏ô: {str(e)}")
        traceback.print_exc()
        return False

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Amulet AI")
    print("üìÖ ‡πÄ‡∏ß‡∏•‡∏≤:", time.strftime("%Y-%m-%d %H:%M:%S"))
    
    tests = [
        ("Training System", test_training_system),
        ("AI Classifier", test_ai_classifier),
        ("Core Modules", test_core_modules),
        ("Frontend Components", test_frontend_components),
    ]
    
    results = {}
    total_tests = len(tests)
    passed_tests = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_name}")
        try:
            result = test_func()
            results[test_name] = result
            if result:
                passed_tests += 1
                print(f"‚úÖ {test_name}: ‡∏ú‡πà‡∏≤‡∏ô")
            else:
                print(f"‚ùå {test_name}: ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô")
        except Exception as e:
            results[test_name] = False
            print(f"üí• {test_name}: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {str(e)}")
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("=" * 60)
    
    for test_name, passed in results.items():
        status = "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô" if passed else "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        print(f"{status} {test_name}")
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"\nüéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ!")
        if success_rate == 100:
            print("üíØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö!")
    else:
        print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")
    
    print("\nüìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    if not results.get("Training System", False):
        print("- ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô: python train_ai_model.py")
    if not results.get("AI Classifier", False):
        print("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies: pip install -r requirements.txt")
    if not results.get("Frontend Components", False):
        print("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á frontend requirements")
    
    print("\nüåê ‡∏´‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà:")
    print("Frontend: streamlit run frontend/main_app.py")
    print("API: python api/main_api.py")

if __name__ == "__main__":
    main()