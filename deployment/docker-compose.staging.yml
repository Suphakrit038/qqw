# Docker Compose for Staging Environment
version: '3.8'

services:
  # API Service
  amulet-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENV=staging
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://amulet_user:staging_password@postgres:5432/amulet_staging
    volumes:
      - ../trained_model:/app/trained_model:ro
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - amulet-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Frontend Service
  amulet-frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend
    ports:
      - "8501:8501"
    environment:
      - ENV=staging
      - API_URL=http://amulet-api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      - amulet-api
    restart: unless-stopped
    networks:
      - amulet-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=amulet_staging
      - POSTGRES_USER=amulet_user
      - POSTGRES_PASSWORD=staging_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - amulet-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - amulet-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - amulet-frontend
      - amulet-api
    restart: unless-stopped
    networks:
      - amulet-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - amulet-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  amulet-network:
    driver: bridge