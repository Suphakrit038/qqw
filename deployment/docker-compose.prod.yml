# Docker Compose for Production Environment
version: '3.8'

services:
  # API Service - Multiple instances for High Availability
  amulet-api-1:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    environment:
      - ENV=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=warning
      - REDIS_URL=redis://redis-cluster:6379
      - DATABASE_URL=postgresql://amulet_user:${DB_PASSWORD}@postgres-master:5432/amulet_production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ../trained_model:/app/trained_model:ro
      - ./logs:/app/logs
    depends_on:
      - postgres-master
      - redis-cluster
    restart: unless-stopped
    networks:
      - amulet-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
      replicas: 2

  amulet-api-2:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    environment:
      - ENV=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=warning
      - REDIS_URL=redis://redis-cluster:6379
      - DATABASE_URL=postgresql://amulet_user:${DB_PASSWORD}@postgres-master:5432/amulet_production
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ../trained_model:/app/trained_model:ro
      - ./logs:/app/logs
    depends_on:
      - postgres-master
      - redis-cluster
    restart: unless-stopped
    networks:
      - amulet-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Frontend Service
  amulet-frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend
    environment:
      - ENV=production
      - API_URL=http://load-balancer:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      - load-balancer
    restart: unless-stopped
    networks:
      - amulet-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      replicas: 2

  # Load Balancer
  load-balancer:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "8000:8000"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - amulet-api-1
      - amulet-api-2
    restart: unless-stopped
    networks:
      - amulet-network

  # PostgreSQL Master-Slave Setup
  postgres-master:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=amulet_production
      - POSTGRES_USER=amulet_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - amulet-network

  postgres-slave:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=amulet_production
      - POSTGRES_USER=amulet_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_MASTER_SERVICE=postgres-master
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres-master --port=5432
      do
      echo 'Waiting for master to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres-master
    restart: unless-stopped
    networks:
      - amulet-network

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --cluster-enabled yes
    volumes:
      - redis_cluster_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - amulet-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - amulet-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - amulet-network

  # Log Management
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - amulet-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - amulet-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - amulet-network

  # Security
  fail2ban:
    image: crazymax/fail2ban:latest
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./security/fail2ban:/data
      - ./logs:/var/log:ro
    restart: unless-stopped
    networks:
      - amulet-network

volumes:
  postgres_master_data:
  postgres_slave_data:
  redis_cluster_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  amulet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16